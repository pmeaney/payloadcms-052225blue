name: Test All Secrets

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-env-secrets:
    name: Test Environment Secrets
    runs-on: ubuntu-latest
    environment: production # This is required for accessing environment secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test Environment Secrets (Production)
        run: |
          # Create files from the environment secrets
          echo "${{ secrets.POSTGRES__SECRET_ENV_FILE }}" > postgres_env.txt
          echo "${{ secrets.PAYLOAD__SECRET_ENV_FILE }}" > payload_env.txt

          # Show that files exist and their line count
          echo "===== Environment Secrets Check ====="
          echo "PostgreSQL env file line count: $(wc -l < postgres_env.txt)"
          echo "Payload CMS env file line count: $(wc -l < payload_env.txt)"

          # Print file contents with masked sensitive values
          echo "===== PostgreSQL Environment Variables ====="
          grep -v "PASSWORD\|SECRET" postgres_env.txt || echo "No non-sensitive data to display"
          echo "[Password and secret values are masked for security]"

          echo "===== Payload CMS Environment Variables ====="
          grep -v "PASSWORD\|SECRET\|URI" payload_env.txt || echo "No non-sensitive data to display"
          echo "[Password, database URI, and secret values are masked for security]"

          # Test if env vars can be loaded and used
          echo "===== Testing Environment Variable Loading ====="
          export $(grep -v "PASSWORD\|SECRET" postgres_env.txt | xargs)
          echo "PostgreSQL database name: $POSTGRES_DB"
          echo "PostgreSQL username: $POSTGRES_USER"

          # Clean up
          rm -f postgres_env.txt payload_env.txt

  test-repo-secrets:
    name: Test Repository Secrets
    runs-on: ubuntu-latest
    # No environment needed for repository secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test Repository Secrets
        run: |
          echo "===== Repository Secrets Check ====="

          # Check if LINUX_BOTCICDGHA_USERNAME exists
          if [ -n "${{ secrets.LINUX_BOTCICDGHA_USERNAME }}" ]; then
            echo "✅ LINUX_BOTCICDGHA_USERNAME is set"
            echo "Username: ${{ secrets.LINUX_BOTCICDGHA_USERNAME }}"
          else
            echo "❌ LINUX_BOTCICDGHA_USERNAME is not set"
          fi

          # Check if LINUX_SERVER_IPADDRESS exists
          if [ -n "${{ secrets.LINUX_SERVER_IPADDRESS }}" ]; then
            echo "✅ LINUX_SERVER_IPADDRESS is set"
            echo "Server IP: ${{ secrets.LINUX_SERVER_IPADDRESS }}"
          else
            echo "❌ LINUX_SERVER_IPADDRESS is not set"
          fi

          # Check if SSH key exists (can't print it, but can check length)
          if [ -n "${{ secrets.LINUX_SSH_PRIVATE_KEY_CICD }}" ]; then
            # Calculate length of SSH key (approximate)
            SSH_KEY_LENGTH=$(echo "${{ secrets.LINUX_SSH_PRIVATE_KEY_CICD }}" | wc -c)
            echo "✅ LINUX_SSH_PRIVATE_KEY_CICD is set"
            echo "SSH key length: ${SSH_KEY_LENGTH} characters"
            # Check if it looks like a valid key
            if echo "${{ secrets.LINUX_SSH_PRIVATE_KEY_CICD }}" | grep -q "PRIVATE KEY"; then
              echo "Key appears to be in the correct format (contains 'PRIVATE KEY')"
            else
              echo "⚠️ Key may not be in the expected format (missing 'PRIVATE KEY')"
            fi
          else
            echo "❌ LINUX_SSH_PRIVATE_KEY_CICD is not set"
          fi

          # Check if GitHub PAT exists
          if [ -n "${{ secrets.GHPATCICD_RPOWKFLO_WRDPCKGS }}" ]; then
            # Don't print the token but show it exists and first few chars
            TOKEN_PREFIX=$(echo "${{ secrets.GHPATCICD_RPOWKFLO_WRDPCKGS }}" | cut -c1-4)
            echo "✅ GHPATCICD_RPOWKFLO_WRDPCKGS is set"
            echo "Token prefix: ${TOKEN_PREFIX}*** (remaining characters hidden)"
            
            # Check if it looks like a GitHub token (usually starts with ghp_)
            if [[ "${TOKEN_PREFIX}" == "ghp_" ]]; then
              echo "Token appears to be in the correct format (starts with ghp_)"
            else
              echo "⚠️ Token may not be in the expected format (doesn't start with ghp_)"
            fi
          else
            echo "❌ GHPATCICD_RPOWKFLO_WRDPCKGS is not set"
          fi
